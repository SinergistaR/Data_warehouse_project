
/* =================================================================================================
   Script: quality_checks_silver.sql
   Purpose:
       - Eseguire controlli di qualità e coerenza sui dati caricati nel livello Silver del Data Warehouse.
       - Identificare valori nulli, duplicati, inconsistenze e problemi di standardizzazione.
       - Garantire che le regole di business applicate in ETL siano rispettate.

   Scope:
       1. CRM
          - crm_cust_info      → Unicità cst_id, spazi indesiderati, valori marital_status e gender standardizzati
          - crm_prd_info       → Unicità prd_id, valori cost > 0, formattazione prd_nm, validità delle date
          - crm_sales_details  → Validità date, consistenza Sales = Quantity * Price, assenza valori nulli/negativi
       2. ERP
          - erp_cust_az12      → Date di nascita plausibili, valori gender standardizzati
          - erp_loc_a101       → Normalizzazione valori paese (DE → Germany, US/USA → United States, ecc.)
          - erp_px_cat_g1v2    → Spazi indesiderati, coerenza e standardizzazione categorie/subcategorie

   Notes:
       - Ogni query riporta l’aspettativa (“no result” quando i dati sono corretti).
       - I test sono di tipo diagnostico → non modificano i dati.
       - Possono essere schedulati periodicamente o eseguiti dopo ogni caricamento ETL.
================================================================================================= */


---------------------------------------------------------------------------
----- crm_cust_info
---------------------------------------------------------------------------

-- Check fro nulls or duplicates in primary key
-- Expectation: no result
SELECT 
cst_id,
COUNT(*)
FROM silver.crm_cust_info
GROUP BY cst_id HAVING COUNT(*)>1 OR cst_id is null;

-- Check for unwanted spaces
-- Expectation: no result
SELECT cst_firstname
FROM silver.crm_cust_info
WHERE cst_firstname != TRIM(cst_firstname)

-- Data Standardization & Consistency
SELECT DISTINCT(cst_marital_status)
FROM silver.crm_cust_info;

SELECT * FROM silver.crm_cust_info;

---------------------------------------------------------------------------
----- crm_prd_info
---------------------------------------------------------------------------

-- Check for nulls or duplicates in primary key
-- Exepectation: No result
SELECT prd_id, COUNT(*)
FROM silver.crm_prd_info
GROUP BY prd_id
HAVING COUNT(*) > 1 OR prd_id IS NULL

--Check for unwanted spaces
-- Expectaation: no results
SELECT prd_nm
FROM silver.crm_prd_info
WHERE prd_nm != TRIM(prd_nm)

-- Check for NULLS or negative costs
-- Expectaation: no results
SELECT prd_cost
FROM silver.crm_prd_info
WHERE prd_cost < 0 OR prd_cost IS NULL

-- Data Standardization & Consistency
SELECT DISTINCT prd_line
FROM silver.crm_prd_info

-- Check for invalid date orders
SELECT *
FROM silver.crm_prd_info
WHERE prd_end_dt < prd_end_dt

---------------------------------------------------------------------------
----- crm_sales_details
---------------------------------------------------------------------------
--Check for Invalid Dates
SELECT
NULLIF(sls_order_dt,0) sls_order_dt
FROM silver.crm_sales_details
WHERE sls_order_dt <= 0 
OR LEN(sls_order_dt) != 8 
OR sls_order_dt > 20500101 
OR sls_order_dt < 19000101

--Check for Invalid Dates
SELECT
NULLIF(sls_ship_dt,0) sls_ship_dt
FROM silver.crm_sales_details
WHERE sls_ship_dt <= 0 
OR LEN(sls_ship_dt) != 8 
OR sls_ship_dt > 20500101 
OR sls_ship_dt < 19000101


--Check for Invalid Dates
SELECT
NULLIF(sls_due_dt,0) sls_due_dt
FROM bronze.crm_sales_details
WHERE sls_due_dt <= 0 
OR LEN(sls_due_dt) != 8 
OR sls_due_dt > 20500101 
OR sls_due_dt < 19000101

--Check for Invalid Dates orders
SELECT
*
FROM silver.crm_sales_details
WHERE sls_order_dt > sls_ship_dt OR sls_order_dt > sls_due_dt

-- Check data consistency: between sales, wauntity and priceù-- >> Sales = Quantity * Price
-- >> Values must not be NULL, zero or negative.

SELECT DISTINCT
sls_sales AS old_sls_sales,
sls_quantity,
sls_price as old_sls_price,
CASE WHEN sls_sales IS NULL OR sls_sales <=0 OR sls_sales != sls_quantity * ABS(sls_price)
        THEN sls_quantity * ABS(sls_price)
    ELSE sls_sales
END AS sls_sales,
CASE WHEN sls_price IS NULL OR sls_price <=0
        THEN sls_sales / NULLIF(sls_quantity,0)
    ELSE sls_price
END AS sls_price
FROM bronze.crm_sales_details
WHERE sls_sales != sls_quantity * sls_price
OR sls_sales IS NULL OR sls_quantity IS NULL OR sls_price IS NULL
OR sls_sales <= 0 OR sls_quantity <= 0 OR sls_price <= 0
ORDER BY sls_sales, sls_quantity, sls_price


SELECT DISTINCT
sls_sales,
sls_quantity,
sls_price
FROM silver.crm_sales_details
WHERE sls_sales != sls_quantity * sls_price
OR sls_sales IS NULL OR sls_quantity IS NULL OR sls_price IS NULL
OR sls_sales <= 0 OR sls_quantity <= 0 OR sls_price <= 0
ORDER BY sls_sales, sls_quantity, sls_price

SELECT * FROM silver.crm_sales_details

---------------------------------------------------------------------------
----- erp_cust_az12
---------------------------------------------------------------------------
--Check for Invalid Dates
SELECT DISTINCT
bdate
FROM silver.erp_cust_az12
WHERE bdate < '1924-01-01' OR bdate > GETDATE()

--Check Data standardization & consistency
SELECT DISTINCT
gen,
CASE WHEN UPPER(TRIM(REPLACE(gen, CHAR(13), ' '))) IN ('F', 'FEMALE') THEN 'Female'
     WHEN UPPER(TRIM(REPLACE(gen, CHAR(13), ' '))) IN ('M', 'MALE') THEN 'Male'
     ELSE 'n/a'
END AS gen
FROM silver.erp_cust_az12


---------------------------------------------------------------------------
----- erp_loc_a101
---------------------------------------------------------------------------
SELECT DISTINCT 
cntry AS old_cntry,
CASE WHEN TRIM(REPLACE(cntry, CHAR(13), ' ')) = 'DE' THEN 'Germany'
    WHEN  TRIM(REPLACE(cntry, CHAR(13), ' ')) IN ('US', 'USA') THEN 'United States'
    WHEN  TRIM(REPLACE(cntry, CHAR(13), ' ')) = '' OR cntry IS NULL THEN 'n/a'
    ELSE TRIM(REPLACE(cntry, CHAR(13), ' '))
END AS cntry
FROM bronze.erp_loc_a101
ORDER BY cntry

---------------------------------------------------------------------------
----- erp_px_cat_g1v2
---------------------------------------------------------------------------

-- Check for unwanted spaces
SELECT * FROM bronze.erp_px_cat_g1v2
WHERE cat != TRIM(cat) OR subcat != TRIM (subcat) OR maintenance != TRIM (maintenance)

-- Data Standardization & consistency
SELECT DISTINCT
cat
FROM bronze.erp_px_cat_g1v2

SELECT DISTINCT
subcat
FROM bronze.erp_px_cat_g1v2

SELECT DISTINCT
maintenance
FROM bronze.erp_px_cat_g1v2

SELECT * FROM silver.erp_px_cat_g1v2
